# Namespace for app
apiVersion: v1
kind: Namespace
metadata:
  name: myapp

---

# Secret for app
apiVersion: v1
kind: Secret
metadata:
  name: myapp-secrets
  namespace: myapp
type: Opaque
stringData:
  SECRET_KEY: "change-me-in-prod"
  DATABASE_URL: "postgresql://user:pass@postgres:5432/app-db"

---

# ConfigMap for app
apiVersion: v1
kind: ConfigMap
metadata:
  name: myapp-config
  namespace: myapp
data:
  APP_ENV: "production"
  LOG_LEVEL: "info"

  FLASK_ENV: "production"
  GUNICORN_WORKERS: "2"

---

# Service to expose app
apiVersion: v1
kind: Service
metadata:
  name: myapp-service
  namespace: myapp
  labels:
    app: myapp-service
spec:
  type: NodePort
  selector:
    app: myapp-service
  ports:
    - name: http
      port: 8080
      targetPort: http
      nodePort: 30080


---

# Deployment with Liveness & Readiness
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp-deployment
  namespace: myapp
spec:
  replicas: 3
  selector:
    matchLabels:
      app: myapp
  template:
    metadata:
      labels:
        app: myapp
    spec:
      containers:
        - name: myapp
          image: nginx:stable  # replace with your Docker image
          ports:
            - containerPort: 80
          envFrom:
            - configMapRef:
                name: myapp-config
            - secretRef:
                name: myapp-secrets
          livenessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 10
---

# HorizontalPodAutoscaler for deployment
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: myapp-hpa
  namespace: myapp
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: myapp-deployment
  minReplicas: 1
  maxReplicas: 6
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 60
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 70

---

# CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: check-myapp
  namespace: myapp
spec:
  schedule: "* * * * *"  # every 5 minutes
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          containers:
            - name: curl
              image: curlimages/curl
              command:
                - sh
                - -c
                - |
                  if curl -s --fail http://myapp-service:80; then
                    echo "Service is up"
                  else
                    echo "Service is down"
                  fi
